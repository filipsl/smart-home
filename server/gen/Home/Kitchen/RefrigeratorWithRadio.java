//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `home.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Home.Kitchen;

public interface RefrigeratorWithRadio extends Refrigerator
{
    void setFrequency(double freq, com.zeroc.Ice.Current current)
        throws FrequencyRangeError;

    double getFrequency(com.zeroc.Ice.Current current);

    Home.PowerState getRadioPowerState(com.zeroc.Ice.Current current);

    void setRadioPowerState(Home.PowerState powerState, com.zeroc.Ice.Current current);

    void setVolumeLevel(short level, com.zeroc.Ice.Current current)
        throws VolumeRangeError;

    short getVolumeLevel(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Home::Device",
        "::Home::Kitchen::Refrigerator",
        "::Home::Kitchen::RefrigeratorWithRadio",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Home::Kitchen::RefrigeratorWithRadio";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setFrequency(RefrigeratorWithRadio obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        double iceP_freq;
        iceP_freq = istr.readDouble();
        inS.endReadParams();
        obj.setFrequency(iceP_freq, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFrequency(RefrigeratorWithRadio obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        double ret = obj.getFrequency(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeDouble(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getRadioPowerState(RefrigeratorWithRadio obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Home.PowerState ret = obj.getRadioPowerState(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        Home.PowerState.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setRadioPowerState(RefrigeratorWithRadio obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Home.PowerState iceP_powerState;
        iceP_powerState = Home.PowerState.ice_read(istr);
        inS.endReadParams();
        obj.setRadioPowerState(iceP_powerState, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setVolumeLevel(RefrigeratorWithRadio obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        short iceP_level;
        iceP_level = istr.readShort();
        inS.endReadParams();
        obj.setVolumeLevel(iceP_level, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getVolumeLevel(RefrigeratorWithRadio obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        short ret = obj.getVolumeLevel(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeShort(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "getFrequency",
        "getFridgeTemperature",
        "getPowerState",
        "getRadioPowerState",
        "getVolumeLevel",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "setFrequency",
        "setFridgeTemperature",
        "setPowerState",
        "setRadioPowerState",
        "setTempUnit",
        "setVolumeLevel"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_getFrequency(this, in, current);
            }
            case 1:
            {
                return Refrigerator._iceD_getFridgeTemperature(this, in, current);
            }
            case 2:
            {
                return Home.Device._iceD_getPowerState(this, in, current);
            }
            case 3:
            {
                return _iceD_getRadioPowerState(this, in, current);
            }
            case 4:
            {
                return _iceD_getVolumeLevel(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 8:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 9:
            {
                return _iceD_setFrequency(this, in, current);
            }
            case 10:
            {
                return Refrigerator._iceD_setFridgeTemperature(this, in, current);
            }
            case 11:
            {
                return Home.Device._iceD_setPowerState(this, in, current);
            }
            case 12:
            {
                return _iceD_setRadioPowerState(this, in, current);
            }
            case 13:
            {
                return Refrigerator._iceD_setTempUnit(this, in, current);
            }
            case 14:
            {
                return _iceD_setVolumeLevel(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
